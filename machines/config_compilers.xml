<?xml version="1.0"?>
<config_compilers
xmlns="https://github.com/CESM-Development/cime"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="https://github.com/CESM-Development/cime config_compilers.xsd">

<!--
===========================

This file defines compiler-specific and machine-specific variables for building
CESM, especially compiler flags. General flags are listed first, followed by
flags specific to particular operating systems, followed by particular machines.

More general flags are replaced by more specific flags. Flags with the "append"
attribute (if it is set to "true" or "1") indicate that the field should be
appended to an already existing definition.

All other attributes indicate that a conditional should be added to the file
included by the build system, so that these flags are added only under the
conditions described by the attribute(s). The accepted attributes include:

 - compile_threaded (boolean specifying whether OpenMP is used)
 - DEBUG (boolean specifying whether a DEBUG build will be produced)
 - MODEL (which model the build system needs flags for)
 - MPILIB (which MPI implementation is being used on this machine)

The env_mach_specific file may set environment variables, or load modules which
set environment variables, which are then used in the Makefile.  For example the
NETCDF_PATH on many machines is set by a module.

When a list of flags could be added to for many different reasons, settings
should typically use the append="true" attribute, to avoid accidentally
overwriting important flags.

Most importantly, CPPDEFS should *always* use append="true".

========================================================================
 Serial/MPI compiler specification
========================================================================

SCC   and  SFC specifies the serial compiler
MPICC and  MPICC specifies the mpi compiler

if $MPILIB is set to mpi-serial then
   CC = $SCC
   FC = $SFC
   MPICC = $SCC
   MPIFC = $SFC
   INC_MPI = $(CIMEROOT)/externals/mct/mpi-serial

========================================================================
 Options for including C++ code in the build
========================================================================

SUPPORTS_CXX (TRUE/FALSE): Whether we have defined all the necessary settings
for including C++ code in the build for this compiler (or this compiler/machine
combination). See below for a description of the necessary settings.

The following are required for a compiler to support the inclusion of C++ code:

SCXX: serial C++ compiler

MPICXX: mpi C++ compiler

CXX_LINKER (CXX/FORTRAN): When C++ code is included in the build, do we use a
C++ or Fortran linker?

In addition, some compilers require additional libraries or link-time flags,
specified via CXX_LIBS or CXX_LDFLAGS, as in the following examples:

<CXX_LIBS> -L/path/to/directory -lfoo </CXX_LIBS>

or

<CXX_LDFLAGS> -cxxlib </CXX_LDFLAGS>

Note that these flags will be added on the link line, regardless of whether we
are using a C++ or Fortran linker. For example, if CXX_LINKER=CXX, then the
above CXX_LIBS line should specify extra libraries needed when linking C++ and
fortran code using a C++ linker. If CXX_LINKER=FORTRAN, then the above
CXX_LDFLAGS line should specify extra LDFLAGS needed when linking C++ and
Fortran code using a Fortran linker.

===========================
-->

<!-- Define default values that can be overridden by specific compilers. -->
<compiler>
  <!-- For non-DEBUG builds, use NDEBUG to turn off assert statements. -->
  <CPPDEFS>
    <append DEBUG="false"> -DNDEBUG </append>
    <append compile_threaded="true"> -DTHREADED_OMP </append>
    <append MODEL="pop"> -D_USE_FLOW_CONTROL </append>
  </CPPDEFS>
  <SUPPORTS_CXX>false</SUPPORTS_CXX>
</compiler>

<compiler COMPILER="ibm">
  <!-- http://publib.boulder.ibm.com/infocenter/comphelp/v7v91/index.jsp
 Notes:  (see xlf user's guide for the details)
  -lmass          => IBM-tuned intrinsic lib
  -qsmp=noauto    => enable SMP directives, but don't add any
  -qsmp=omp       => enable SMP directives, strict omp
  -qstrict        => don't turn divides into multiplies, etc
  -qhot           => higher-order-transformations (eg. loop padding)
  -qalias=noaryovrlp => assume no array overlap wrt equivalance, etc
  -qmaxmem=-1     => memory available to compiler during optimization
  -qipa=level=2   => InterProcedure Analysis (eg. inlining) => slow compiles
  -p -pg          => enable profiling (use in both FFLAGS and LDFLAGS)
  -qreport        => for smp/omp only
  -g              => always leave it on because overhead is minimal
  -qflttrap=...   => enable default sigtrap (core dump)
  -C              => runtime array bounds checking (runs slow)
  -qinitauto=...  => initializes automatic variables
  -->
  <CPPDEFS>
    <append>-DFORTRAN_SAME</append>
  </CPPDEFS>
  <CPRE>-WF,-D</CPRE>

  <CFLAGS>
    <base> -g -qfullpath -qmaxmem=-1 </base>
    <append DEBUG="false"> -O3 </append>
    <append DEBUG="false" compile_threaded="true"> -qsmp=omp </append>
    <append DEBUG="true" compile_threaded="true"> -qsmp=omp:noopt </append>
  </CFLAGS>

  <FFLAGS>
    <base> -g -qfullpath -qmaxmem=-1 </base>
    <append DEBUG="false"> -O2 -qstrict -Q </append>
    <append DEBUG="true"> -qinitauto=7FF7FFFF -qflttrap=ov:zero:inv:en </append>
    <append DEBUG="true" MODEL="pop"> -C </append>
    <append DEBUG="false" compile_threaded="true"> -qsmp=omp </append>
    <append DEBUG="true" compile_threaded="true"> -qsmp=omp:noopt </append>
  </FFLAGS>
  <FIXEDFLAGS>
    <base> -qsuffix=f=f -qfixed=132 </base>
  </FIXEDFLAGS>
  <FREEFLAGS>
    <base> -qsuffix=f=f90:cpp=F90 </base>
  </FREEFLAGS>
  <FC_AUTO_R8>
    <base> -qrealsize=8 </base>
  </FC_AUTO_R8>

  <LDFLAGS>
    <append DEBUG="false" compile_threaded="true"> -qsmp=omp </append>
    <append DEBUG="true" compile_threaded="true"> -qsmp=omp:noopt </append>
  </LDFLAGS>

  <HAS_F2008_CONTIGUOUS>true</HAS_F2008_CONTIGUOUS>

</compiler>

<compiler COMPILER="pgi">
  <!-- http://www.pgroup.com/resources/docs.htm                                              -->
  <!-- Notes:  (see pgi man page & user's guide for the details) -->
  <!--  -Mextend        => Allow 132-column source lines -->
  <!--  -Mfixed         => Assume fixed-format source -->
  <!--  -Mfree          => Assume free-format source -->

  <!--  -byteswapio     => Swap byte-order for unformatted i/o (big/little-endian) -->

  <!--  -target=linux   => Specifies the target architecture to Compute Node Linux (CNL only) -->
  <!--  -fast           => Chooses generally optimal flags for the target platform -->
  <!--  -Mnovect        => Disables automatic vector pipelining -->
  <!--  -Mvect=nosse    => Don't generate SSE, SSE2, 3Dnow, and prefetch instructions in loops    -->
  <!--  -Mflushz        => Set SSE to flush-to-zero mode (underflow) loops where possible  -->
  <!--  -Kieee          => Perform fp ops in strict conformance with the IEEE 754 standard.  -->
  <!--                     Some optimizations disabled, slightly slower, more accurate math.  -->
  <!--  -mp=nonuma      => Don't use thread/processors affinity (for NUMA architectures)  -->
  <!-- -->
  <!--  -g              => Generate symbolic debug information. Turns off optimization.   -->
  <!--  -gopt           => Generate information for debugger without disabling optimizations  -->
  <!--  -Mbounds        => Add array bounds checking  -->
  <!--  -Ktrap=fp       => Determine IEEE Trap conditions fp => inv,divz,ovf   -->
  <!--                     * inv: invalid operands         -->
  <!--                     * divz divide by zero           -->
  <!--                     * ovf: floating point overflow   -->
  <!--  -Mlist          => Create a listing file             -->
  <!--  -F              => leaves file.f for each preprocessed file.F file  -->
  <!--  -time           => Print execution time for each compiler step  -->


  <CPPDEFS>
    <append> -DFORTRANUNDERSCORE -DNO_SHR_VMATH -DNO_R16 </append>
  </CPPDEFS>

  <CFLAGS>
    <base> -gopt  -time </base>
    <append compile_threaded="true"> -mp </append>
  </CFLAGS>

  <FFLAGS>
    <base> -i4 -gopt  -time -Mextend -byteswapio -Mflushz -Kieee </base>
    <append compile_threaded="true"> -mp </append>
    <append DEBUG="true"> -O0 -g -Ktrap=fp -Mbounds -Kieee </append>
    <append MODEL="datm"> -Mnovect </append>
    <append MODEL="docn"> -Mnovect </append>
    <append MODEL="dwav"> -Mnovect </append>
    <append MODEL="dice"> -Mnovect </append>
    <append MODEL="drof"> -Mnovect </append>
    <append MODEL="dlnd"> -Mnovect </append>
  </FFLAGS>
  <FFLAGS_NOOPT>
    <base> -O0 -g -Ktrap=fp -Mbounds -Kieee </base>
    <append compile_threaded="true"> -mp </append>
  </FFLAGS_NOOPT>
  <FIXEDFLAGS>
    <base> -Mfixed </base>
  </FIXEDFLAGS>
  <FREEFLAGS>
    <base> -Mfree </base>
  </FREEFLAGS>
  <FC_AUTO_R8>
    <base> -r8 </base>
  </FC_AUTO_R8>

  <LDFLAGS>
    <base> -time -Wl,--allow-multiple-definition </base>
    <append compile_threaded="true"> -mp </append>
  </LDFLAGS>

  <SCC> pgcc </SCC>
  <SFC> pgf95 </SFC>
  <SCXX> pgc++ </SCXX>
  <MPICC> mpicc </MPICC>
  <MPIFC> mpif90 </MPIFC>
  <MPICXX> mpicxx </MPICXX>

  <CXX_LINKER>CXX</CXX_LINKER>
  <!-- Note that SUPPORTS_CXX is false for pgi in general, because we
       need some machine-specific libraries - see hopper pgi for an
       example -->

  <!-- Technically, PGI does recognize this keyword during parsing,
       but support is either buggy or incomplete, notably in that
       the "contiguous" attribute is incompatible with "intent".-->
  <HAS_F2008_CONTIGUOUS>false</HAS_F2008_CONTIGUOUS>
</compiler>

<compiler COMPILER="intel">
  <!-- http://software.intel.com/en-us/articles/intel-composer-xe/ -->
  <CPPDEFS>
    <append> -DFORTRANUNDERSCORE -DNO_R16 </append>
  </CPPDEFS>

  <CFLAGS>
    <base> -O2  -no-opt-dynamic-align -fp-model precise </base>
    <append compile_threaded="true">-openmp</append>
  </CFLAGS>

  <FFLAGS>
    <base> -no-opt-dynamic-align  -convert big_endian -assume byterecl -ftz -traceback -assume realloc_lhs -fp-model source </base>
    <append compile_threaded="true">-openmp</append>
    <append DEBUG="true"> -O0 -g -check uninit -check bounds -check pointers -fpe0 -check noarg_temp_created </append>
    <append DEBUG="false"> -O2 </append>
    <append MPILIB="mpi-serial"> -mcmodel medium </append>
  </FFLAGS>
  <FFLAGS_NOOPT>
    <base> -O0 </base>
    <append compile_threaded="true"> -openmp </append>
  </FFLAGS_NOOPT>
  <FREEFLAGS>
    <base> -free </base>
  </FREEFLAGS>
  <FIXEDFLAGS>
    <base> -fixed -132 </base>
  </FIXEDFLAGS>
  <FC_AUTO_R8>
    <base> -r8 </base>
  </FC_AUTO_R8>

  <LDFLAGS>
    <append compile_threaded="true">-openmp</append>
  </LDFLAGS>
  <SLIBS>
    <append MPILIB="mpich"> -mkl=cluster </append>
    <append MPILIB="mpich2"> -mkl=cluster </append>
    <append MPILIB="mpt"> -mkl=cluster </append>
    <append MPILIB="openmpi"> -mkl=cluster </append>
    <append MPILIB="impi"> -mkl=cluster </append>
    <append MPILIB="mpi-serial"> -mkl </append>
  </SLIBS>

  <CXX_LDFLAGS>
    <base> -cxxlib </base>
  </CXX_LDFLAGS>

  <SFC> ifort </SFC>
  <SCC> icc </SCC>
  <SCXX> icpc </SCXX>
  <MPIFC> mpif90 </MPIFC>
  <MPICC> mpicc  </MPICC>
  <MPICXX> mpicxx </MPICXX>
  <CXX_LINKER>FORTRAN</CXX_LINKER>
  <SUPPORTS_CXX>true</SUPPORTS_CXX>
  <HAS_F2008_CONTIGUOUS>true</HAS_F2008_CONTIGUOUS>
</compiler>

<compiler COMPILER="gnu">
  <!-- http://gcc.gnu.org/onlinedocs/gfortran/ -->
  <CPPDEFS>
    <append> -DFORTRANUNDERSCORE -DNO_R16</append>
  </CPPDEFS>

  <CFLAGS>
    <append compile_threaded="true"> -fopenmp </append>
  </CFLAGS>

  <FFLAGS>
    <base> -O -fconvert=big-endian </base>
    <append compile_threaded="true"> -fopenmp </append>
    <append DEBUG="true"> -g -Wall </append>
  </FFLAGS>
  <FFLAGS_NOOPT>
    <base> -O0 </base>
  </FFLAGS_NOOPT>
  <FIXEDFLAGS>
    <base> -ffixed-form -ffixed-line-length-none </base>
  </FIXEDFLAGS>
  <FREEFLAGS>
    <base> -ffree-form -ffree-line-length-none </base>
  </FREEFLAGS>
  <FC_AUTO_R8>
    <base> -fdefault-real-8 </base>
  </FC_AUTO_R8>

  <LDFLAGS>
    <append> compile_threaded="true"> -fopenmp </append>
  </LDFLAGS>

  <CMAKE_OPTS>
    <append MODEL="cism"> -D CISM_GNU=ON </append>
  </CMAKE_OPTS>

  <SFC> gfortran </SFC>
  <SCC> gcc </SCC>
  <SCXX> g++ </SCXX>
  <MPIFC> mpif90 </MPIFC>
  <MPICC> mpicc  </MPICC>
  <MPICXX> mpicxx </MPICXX>
  <CXX_LINKER>FORTRAN</CXX_LINKER>
  <SUPPORTS_CXX>true</SUPPORTS_CXX>
  <HAS_F2008_CONTIGUOUS>false</HAS_F2008_CONTIGUOUS>
</compiler>


<compiler COMPILER="cray">
  <!--http://docs.cray.com/cgi-bin/craydoc.cgi?mode=View;id=S-3901-83;idx=books_search;this_sort=;q=;type=books;title=Cray%20Fortran%20Reference%20Manual -->
  <CPPDEFS>
    <append> -DFORTRANUNDERSCORE -DNO_R16 </append>
    <append MODEL="pop"> -DDIR=NOOP </append>
    <append MODEL="moby"> -DDIR=NOOP </append>
  </CPPDEFS>

  <CFLAGS>
    <append compile_threaded="false"> -h noomp </append>
  </CFLAGS>

  <FFLAGS>
    <base> -O2  -f free -N 255  -h byteswapio -x dir </base>
    <append compile_threaded="false"> -h noomp </append>
    <append DEBUG="true"> -g -K trap=fp -m1 </append>
  </FFLAGS>
  <FFLAGS_NOOPT>
    <base> -O0 </base>
    <append compile_threaded="false"> -h noomp </append>
  </FFLAGS_NOOPT>
  <FC_AUTO_R8>
    <base> -s real64 </base>
  </FC_AUTO_R8>

  <LDFLAGS>
    <base> -Wl,--allow-multiple-definition -h byteswapio </base>
    <append compile_threaded="false"> -h noomp </append>
  </LDFLAGS>

  <HAS_F2008_CONTIGUOUS>true</HAS_F2008_CONTIGUOUS>
</compiler>


<compiler COMPILER="nag">

  <CPPDEFS>
    <append> -DFORTRANUNDERSCORE -DNO_CRAY_POINTERS -DNO_SHR_VMATH </append>
    <!-- needed for nag pio build (only until PIO 2?) -->
    <append> -DNO_C_SIZEOF </append>
  </CPPDEFS>

  <CFLAGS>
    <append DEBUG="true"> -g </append>
  </CFLAGS>

  <!-- Yes, you really do need this huge -wmismatch flag for NAG to work.    -->
  <!-- More specifically, it exempts MPI functions without explicit          -->
  <!-- interfaces from certain argument checks. Should not be necessary in   -->
  <!-- libraries that only use the F90 module interface. mpibcast and        -->
  <!-- mpiscatterv are actually CAM wrappers for MPI.                        -->
  <FFLAGS>
    <base> -Wp,-macro=no_com -wmismatch=mpi_send,mpi_recv,mpi_bcast,mpi_allreduce,mpi_reduce,mpi_isend,mpi_irecv,mpi_irsend,mpi_rsend,mpi_gatherv,mpi_gather,mpi_scatterv,mpi_allgather,mpi_alltoallv,mpi_file_read_all,mpi_file_write_all,mpibcast,mpiscatterv    -convert=BIG_ENDIAN </base>
    <append DEBUG="false"> -ieee=full -O2 </append>
    <!-- The "-gline" option is nice, but it doesn't work with OpenMP.         -->
    <!-- All OpenMP cases are WIP anyway.                                      -->
    <append DEBUG="true"> -C=all -g -time -f2003 -ieee=stop </append>
    <append DEBUG="true" compile_threaded="false"> -gline </append>
    <append compile_threaded="true"> -openmp </append>
  </FFLAGS>
  <FFLAGS_NOOPT>
    <base> <var>FFLAGS</var> </base>
    <append DEBUG="false"> -ieee=full </append>
    <!-- Hack! If DEBUG="true", put runtime checks in FFLAGS, but not into     -->
    <!-- FFLAGS_NOOPT, allowing strict checks to be removed from files by      -->
    <!-- having them use FFLAGS_NOOPT in Depends.nag                           -->
    <append DEBUG="true"> -g -time -f2003 -ieee=stop </append>
    <append DEBUG="true" compile_threaded="false"> -gline </append>
    <append compile_threaded="true"> -openmp </append>
  </FFLAGS_NOOPT>
  <FIXEDFLAGS>
    <base> -fixed </base>
  </FIXEDFLAGS>
  <FREEFLAGS>
    <base> -free </base>
  </FREEFLAGS>
  <FC_AUTO_R8>
    <base> -r8 </base>
  </FC_AUTO_R8>

  <LDFLAGS>
    <append compile_threaded="true"> -openmp </append>
  </LDFLAGS>


  <SFC> nagfor </SFC>
  <MPIFC> mpif90 </MPIFC>
  <SCC> gcc </SCC>
  <MPICC> mpicc </MPICC>
  <HAS_F2008_CONTIGUOUS>false</HAS_F2008_CONTIGUOUS>
</compiler>

<compiler OS="Darwin">
   <CPPDEFS>
     <append> -DSYSDARWIN </append>
   </CPPDEFS>
   <LDFLAGS>
     <append MODEL="driver"> -all_load </append>
   </LDFLAGS>
</compiler>

<compiler COMPILER="intel" OS="Darwin" >
  <FFLAGS>
    <append compile_threaded="false"> -heap-arrays </append>
  </FFLAGS>
</compiler>

<compiler MACH="userdefined">
  <CPPDEFS>
    <append></append>
  </CPPDEFS>

  <SLIBS>
    <!-- Just a hint; a user might need nf-config or to specify their
         own flags from scratch. -->
    <append><shell><var>NETCDF_PATH</var>/bin/nc-config --flibs</shell></append>
  </SLIBS>

  <NETCDF_PATH> USERDEFINED_MUST_EDIT_THIS</NETCDF_PATH>
  <PNETCDF_PATH></PNETCDF_PATH>
  <CONFIG_ARGS></CONFIG_ARGS>
  <ESMF_LIBDIR></ESMF_LIBDIR>
  <MPI_LIB_NAME></MPI_LIB_NAME>
  <MPI_PATH></MPI_PATH>
</compiler>

<compiler OS="CNL">
  <CPPDEFS>
    <append> -DLINUX </append>
    <append MODEL="gptl"> -DHAVE_NANOTIME -DBIT64 -DHAVE_VPRINTF -DHAVE_BACKTRACE -DHAVE_SLASHPROC -DHAVE_COMM_F2C -DHAVE_TIMES -DHAVE_GETTIMEOFDAY </append>
  </CPPDEFS>
  <SFC> ftn </SFC>
  <SCC> cc </SCC>
  <SCXX> CC </SCXX>
  <MPIFC> ftn </MPIFC>
  <MPICC> cc </MPICC>
  <MPICXX> CC </MPICXX>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <PNETCDF_PATH><env>PARALLEL_NETCDF_DIR</env></PNETCDF_PATH>
  <NETCDF_PATH><env>NETCDF_DIR</env></NETCDF_PATH>
</compiler>

<compiler COMPILER="intel" MACH="edison">
  <CPPDEFS>
    <append MODEL="gptl"> -DHAVE_PAPI </append>
  </CPPDEFS>

  <CFLAGS>
    <append DEBUG="false"> -O2 </append>
  </CFLAGS>

  <FFLAGS>
    <append DEBUG="false"> -O2 </append>
  </FFLAGS>

  <SLIBS>
    <append> -L<env>NETCDF_DIR</env> -lnetcdff -Wl,--as-needed,-L<env>NETCDF_DIR</env>/lib -lnetcdff -lnetcdf </append>
  </SLIBS>

  <CONFIG_ARGS>
    <append> --host=Linux </append>
  </CONFIG_ARGS>
</compiler>


<compiler MACH="yellowstone">
  <CPPDEFS>
    <append MODEL="gptl"> -DHAVE_NANOTIME -DBIT64 -DHAVE_VPRINTF -DHAVE_BACKTRACE -DHAVE_SLASHPROC -DHAVE_COMM_F2C -DHAVE_TIMES -DHAVE_GETTIMEOFDAY </append>
  </CPPDEFS>
  <PIO_FILESYSTEM_HINTS>gpfs</PIO_FILESYSTEM_HINTS>
  <NETCDF_PATH><env>NETCDF</env></NETCDF_PATH>
  <PNETCDF_PATH><env>PNETCDF</env></PNETCDF_PATH>
</compiler>

<compiler COMPILER="gnu" MACH="yellowstone">
  <LAPACK_LIBDIR> /glade/apps/opt/lib </LAPACK_LIBDIR>
</compiler>

<compiler MACH="yellowstone" COMPILER="intel">
  <CFLAGS>
    <append MPILIB="mpich2"> -xHost </append>
  </CFLAGS>

  <FFLAGS>
    <append MPILIB="mpich2"> -xHost </append>
    <append DEBUG="true"> -check noarg_temp_created </append>
  </FFLAGS>

  <SLIBS>
    <append MPILIB="mpich2"> -Wl,-rpath <var>PAPI_LIB</var> -L<var>PAPI_LIB</var> -lpapi</append>
  </SLIBS>

  <!-- Needed due to the way that netcdf is loaded on yellowstone -->
  <SCC MPILIB="mpich2"><var>MPICC</var></SCC>
  <SFC MPILIB="mpich2"><var>MPIFC</var></SFC>
  <MPICXX MPILIB="mpich2">mpiicpc</MPICXX>
  <TRILINOS_PATH MPILIB="mpich2"><env>TRILINOS_PATH</env></TRILINOS_PATH>
  <PAPI_INC MPILIB="mpich2">/glade/apps/opt/papi/5.3.0/intel/12.1.5/include/</PAPI_INC>
  <PAPI_LIB MPILIB="mpich2">/glade/apps/opt/papi/5.3.0/intel/12.1.5/lib64 </PAPI_LIB>
  <PFUNIT_PATH>/glade/u/home/sacks/pFUnit/pFUnit3.0.1_Intel14.0.2_Serial</PFUNIT_PATH>
</compiler>

<compiler MACH="yellowstone" COMPILER="pgi">
  <CFLAGS>
    <append DEBUG="false"> -O </append>
  </CFLAGS>

  <FFLAGS>
    <append DEBUG="false"> -O </append>
  </FFLAGS>

  <SLIBS>
    <append> -llapack -lblas </append>
  </SLIBS>
</compiler>

<compiler MACH="yellowstone" COMPILER="pathscale">
  <CPPDEFS>
    <append> -DNO_MPIMOD </append>
  </CPPDEFS>

  <SCC>pathcc</SCC>
  <SFC>pathf95</SFC>
</compiler>


<compiler MACH="erebus">
  <!--The following flag is required due to a bug in mpich2 v1208 -->
  <CPPDEFS>
    <append MODEL="cam" MPILIB="mpich2"> -DNO_MPI2 </append>
  </CPPDEFS>

  <PIO_FILESYSTEM_HINTS>gpfs</PIO_FILESYSTEM_HINTS>
  <NETCDF_PATH><env>NETCDF</env></NETCDF_PATH>
  <PNETCDF_PATH><env>PNETCDF</env></PNETCDF_PATH>
  <SCC>mpicc</SCC>
  <SFC>mpif90</SFC>
</compiler>

<compiler COMPILER="intel" MACH="titan">
  <CFLAGS>
    <append DEBUG="false"> -O2 </append>
  </CFLAGS>

  <FFLAGS>
    <append DEBUG="false"> -O2 </append>
  </FFLAGS>

  <SLIBS>
    <append><shell><var>NETCDF_PATH</var>/bin/nf-config --flibs</shell></append>
  </SLIBS>

  <CONFIG_ARGS>
    <append> --host=Linux </append>
  </CONFIG_ARGS>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <SUPPORTS_CXX>true</SUPPORTS_CXX>
</compiler>

<compiler COMPILER="pgi" MACH="titan">
  <CFLAGS>
    <append DEBUG="false"> -O2 </append>
  </CFLAGS>

  <FFLAGS>
    <append DEBUG="false"> -O2 </append>
  </FFLAGS>

  <SLIBS>
    <append><shell>nf-config --flibs</shell></append>
  </SLIBS>
  <CXX_LIBS>
    <base>-lfmpich -lmpichf90_pgi $(PGI_PATH)/linux86-64/$(PGI_VERSION)/lib/f90main.o</base>
  </CXX_LIBS>

  <CONFIG_ARGS>
    <append> --host=Linux </append>
  </CONFIG_ARGS>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <TRILINOS_PATH>/lustre/atlas1/cli900/world-shared/cesm/software/Trilinos/Trilinos-11.12.1/titan-pgi-cesm/install</TRILINOS_PATH>
  <SUPPORTS_CXX>true</SUPPORTS_CXX>
</compiler>


<compiler MACH="bluewaters">
  <CPPDEFS>
    <append MODEL="gptl"> -DHAVE_PAPI </append>
  </CPPDEFS>

  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
</compiler>

<compiler MACH="bluewaters" COMPILER="pgi">
  <CFLAGS>
    <append> -nofma </append>
    <append DEBUG="false"> -O2 </append>
  </CFLAGS>

  <FFLAGS>
    <append> -nofma </append>
    <append DEBUG="false"> -O2 </append>
  </FFLAGS>

 <CXX_LIBS>
   <base> -lmpichf90_pgi $(PGI_PATH)/linux86-64/$(PGI_VERSION)/lib/f90main.o </base>
 </CXX_LIBS>

 <SUPPORTS_CXX>true</SUPPORTS_CXX>
</compiler>


<compiler MACH="janus">
  <SLIBS>
    <append><shell><var>NETCDF_PATH</var>/bin/nc-config --flibs</shell></append>
  </SLIBS>

  <NETCDF_PATH><env>NETCDF</env></NETCDF_PATH>
  <PNETCDF_PATH><env>PNETCDF</env></PNETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <SFC> mpif90 </SFC>
  <SCC> mpicc </SCC>
</compiler>

<compiler COMPILER="intel" MACH="janus">
  <CFLAGS>
    <append DEBUG="false"> -O2 -xHost </append>
  </CFLAGS>

  <FFLAGS>
    <append DEBUG="false"> -O2 -xHost </append>
  </FFLAGS>

  <ESMF_LIBDIR>/projects/siva7831/esmf_install/esmf-5.3.0-O-intel-openmpi/lib</ESMF_LIBDIR>
  <PNETCDF_PATH>/home/jimedwards/parallel-netcdf/1.3.0/intel/12.1.4/</PNETCDF_PATH>
</compiler>

<compiler COMPILER="pgi" MACH="janus">
  <CFLAGS>
    <append DEBUG="false"> -O2 </append>
  </CFLAGS>

  <FFLAGS>
    <append DEBUG="false"> -O2 </append>
  </FFLAGS>

  <SLIBS>
    <append> -llapack -lblas </append>
  </SLIBS>
</compiler>

<compiler COMPILER="ibm" OS="AIX">
  <CFLAGS>
    <append> -qarch=auto -qtune=auto -qcache=auto </append>
  </CFLAGS>

  <FFLAGS>
    <append> -qarch=auto -qtune=auto -qcache=auto -qsclk=micro </append>
    <append MODEL="cam"> -qspill=6000 </append>
  </FFLAGS>

  <LDFLAGS>
    <append> -bdatapsize:64K -bstackpsize:64K -btextpsize:32K </append>
    <append DEBUG="true"> -qsigtrap=xl__trcedump </append>
  </LDFLAGS>
  <SLIBS>
    <append> -lmassv -lessl </append>
    <append DEBUG="false"> -lmass </append>
  </SLIBS>

  <CONFIG_SHELL> /usr/bin/bash </CONFIG_SHELL>
  <SFC> xlf2003_r </SFC>
  <MPIFC> mpxlf2003_r </MPIFC>
  <SCC> cc_r </SCC>
  <MPICC> mpcc_r </MPICC>
</compiler>

<compiler COMPILER="ibm" OS="BGL">
  <CPPDEFS>
    <append> -DLINUX -DnoI8 </append>
  </CPPDEFS>

  <CFLAGS>
    <base> -O3 -qstrict </base>
    <append> -qtune=440 -qarch=440d </append>
  </CFLAGS>

  <FFLAGS>
    <append> -qtune=440 -qarch=440d </append>
    <append> -qextname=flush </append>
    <append DEBUG="false"> -O3 -qstrict -Q </append>
    <append DEBUG="true"> -qinitauto=FF911299 -qflttrap=ov:zero:inv:en </append>
  </FFLAGS>

  <LDFLAGS>
    <base> -Wl,--relax -Wl,--allow-multiple-definition </base>
  </LDFLAGS>

  <CONFIG_ARGS>
    <base> --build=powerpc-bgp-linux --host=powerpc64-suse-linux </base>
  </CONFIG_ARGS>
  <MPI_PATH> /bgl/BlueLight/ppcfloor/bglsys</MPI_PATH>
  <MPI_LIB_NAME> mpich.rts </MPI_LIB_NAME>
  <SFC> blrts_xlf2003 </SFC>
  <MPIFC> blrts_xlf2003 </MPIFC>
  <SCC> blrts_xlc </SCC>
  <MPICC> blrts_xlc </MPICC>
  <MLIBS>
    <base> -L/bgl/BlueLight/ppcfloor/bglsys/lib -lmpich.rts -lmsglayer.rts -lrts.rts -ldevices.rts </base>
  </MLIBS>
</compiler>

<compiler COMPILER="ibm" OS="BGP">
  <CPPDEFS>
    <append> -DLINUX -DnoI8 </append>
  </CPPDEFS>

  <CFLAGS>
    <append> -qtune=450 -qarch=450 -I/bgsys/drivers/ppcfloor/arch/include/ </append>
  </CFLAGS>

  <FFLAGS>
    <append> -qspillsize=2500 -qtune=450 -qarch=450 </append>
    <append> -qextname=flush </append>
  </FFLAGS>

  <LDFLAGS>
    <base> -Wl,--relax -Wl,--allow-multiple-definition </base>
  </LDFLAGS>

  <CONFIG_ARGS>
    <base> --build=powerpc-bgp-linux --host=powerpc64-suse-linux </base>
  </CONFIG_ARGS>
</compiler>


<compiler COMPILER="ibm" OS="BGQ">
  <CPPDEFS>
    <append> -DLINUX </append>
  </CPPDEFS>

  <FFLAGS>
    <base> -g -qfullpath -qmaxmem=-1 -qspillsize=2500 -qextname=flush </base>
    <append DEBUG="false"> -O3 -qstrict -Q </append>
    <append DEBUG="false" compile_threaded="true"> -qsmp=omp </append>
    <append DEBUG="true" compile_threaded="true"> -qsmp=omp:noopt </append>
  </FFLAGS>

  <LDFLAGS>
    <base> -Wl,--relax -Wl,--allow-multiple-definition </base>
  </LDFLAGS>

  <CONFIG_ARGS>
    <base> --build=powerpc-bgp-linux --host=powerpc64-suse-linux </base>
  </CONFIG_ARGS>
</compiler>


<compiler COMPILER="ibm" MACH="mira">
  <SLIBS>
    <append> -L<var>NETCDF_PATH</var>/lib -lnetcdff -lnetcdf -L/soft/libraries/hdf5/1.8.14/cnk-xl/current/lib -lhdf5_hl -lhdf5 -L/soft/libraries/alcf/current/xl/ZLIB/lib -lz -L/soft/libraries/alcf/current/xl/LAPACK/lib -llapack -L/soft/libraries/alcf/current/xl/BLAS/lib -lblas -L/bgsys/drivers/ppcfloor/comm/sys/lib </append>
  </SLIBS>

  <SFC> mpixlf2003_r </SFC>
  <MPIFC> mpixlf2003_r </MPIFC>
  <SCC> mpixlc_r </SCC>
  <MPICC> mpixlc_r </MPICC>
  <!-- This LD is a workaround for darshan initialization on mira (Darshan does -->
  <!-- not run if f90 or higher is used for linking -->
  <LD> mpixlf77_r </LD>
  <NETCDF_PATH>/soft/libraries/netcdf/4.3.3-f4.4.1/cnk-xl/current/</NETCDF_PATH>
  <PNETCDF_PATH>/soft/libraries/pnetcdf/1.6.0/cnk-xl/current/</PNETCDF_PATH>
  <PFUNIT_PATH>/home/santos/pFUnit/pFUnit_IBM</PFUNIT_PATH>
  <HDF5_PATH>/soft/libraries/hdf5/1.8.14/cnk-xl/current/ </HDF5_PATH>
  <PIO_FILESYSTEM_HINTS>gpfs</PIO_FILESYSTEM_HINTS>
</compiler>


<compiler COMPILER="ibm" MACH="tukey">
  <SLIBS>
    <append> -L<var>NETCDF_PATH</var>/lib -lnetcdff -lnetcdf -L/soft/libraries/hdf5/1.8.10/cnk-xl/current/lib -lhdf5_hl -lhdf5 -L/soft/libraries/alcf/current/xl/ZLIB/lib -lz -L/soft/libraries/alcf/current/xl/LAPACK/lib -llapack -L/soft/libraries/alcf/current/xl/BLAS/lib -lblas -L/bgsys/drivers/ppcfloor/comm/sys/lib </append>
  </SLIBS>

  <SFC> mpixlf2003_r </SFC>
  <MPIFC> mpixlf2003_r </MPIFC>
  <SCC> mpixlc_r </SCC>
  <MPICC> mpixlc_r </MPICC>
  <!-- This LD is a workaround for darshan initialization on tukey?? (Darshan does -->
  <!-- not run if f90 or higher is used for linking -->
  <LD> mpixlf77_r </LD>
  <NETCDF_PATH>/soft/libraries/netcdf/4.3.0-f4.2/cnk-xl/V1R2M0-20131211/</NETCDF_PATH>
  <PNETCDF_PATH>/soft/libraries/pnetcdf/1.3.1/cnk-xl/current/</PNETCDF_PATH>
  <PFUNIT_PATH>/home/santos/pFUnit/pFUnit_IBM</PFUNIT_PATH>
  <HDF5_PATH>/soft/libraries/hdf5/1.8.10/cnk-xl/current/ </HDF5_PATH>
  <PIO_FILESYSTEM_HINTS>gpfs</PIO_FILESYSTEM_HINTS>
</compiler>

<compiler COMPILER="ibm" MACH="juqueen">
  <SLIBS>
    <append> -L/bgsys/local/netcdf/lib -lnetcdf -L/bgsys/drivers/ppcfloor/comm/lib </append>
  </SLIBS>

  <SFC> mpixlf2003_r </SFC>
  <MPIFC> mpixlf2003_r </MPIFC>
  <SCC> mpixlc_r </SCC>
  <MPICC> mpixlc_r </MPICC>
  <NETCDF_PATH> /bgsys/local/netcdf/</NETCDF_PATH>
  <PNETCDF_PATH> /bgsys/local/parallel-netcdf/v1.3.1</PNETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>gpfs</PIO_FILESYSTEM_HINTS>
</compiler>

<compiler MACH="brutus">
  <CONFIG_ARGS>
    <base> --host=LINUX </base>
  </CONFIG_ARGS>
  <NETCDF_PATH><env>NETCDF</env></NETCDF_PATH>
  <MPI_PATH><env>MPI_ROOT</env></MPI_PATH>
  <MPI_LIB_NAME MPILIB="mpich"> mpich </MPI_LIB_NAME>
  <MPI_LIB_NAME MPILIB="openmpi"> mpi </MPI_LIB_NAME>
</compiler>

<compiler COMPILER="pgi" MACH="eastwind">
  <CPPDEFS>
    <append> -DLINUX </append>
  </CPPDEFS>

  <CFLAGS>
    <append DEBUG="false"> -O2 </append>
  </CFLAGS>

  <FFLAGS>
    <append DEBUG="false"> -O2 </append>
  </FFLAGS>

  <SLIBS>
    <append> -L<var>NETCDF_PATH</var>/lib -lnetcdf -lnetcdff -lpmi </append>
  </SLIBS>

  <CONFIG_ARGS>
    <append> --host=Linux </append>
  </CONFIG_ARGS>
  <NETCDF_PATH><env>NETCDF_HOME</env></NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
</compiler>

<compiler COMPILER="pgi" MACH="olympus">
  <CPPDEFS>
    <append> -DLINUX </append>
  </CPPDEFS>

  <CFLAGS>
    <append DEBUG="false"> -O2 </append>
  </CFLAGS>

  <FFLAGS>
    <append DEBUG="false"> -O2 </append>
  </FFLAGS>

  <SLIBS>
    <append> -L<var>NETCDF_PATH</var>/lib -lnetcdf -lnetcdff -lpmi </append>
  </SLIBS>

  <CONFIG_ARGS>
    <append> --host=Linux </append>
  </CONFIG_ARGS>
  <NETCDF_PATH><env>NETCDF_LIB</env>/..</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
</compiler>

<compiler COMPILER="intel" MACH="evergreen">
  <CPPDEFS>
    <append> -DLINUX </append>
  </CPPDEFS>

  <CFLAGS>
    <append> -heap_arrays </append>
  </CFLAGS>

  <FFLAGS>
    <append> -heap_arrays </append>
  </FFLAGS>

  <SLIBS>
    <append> -L<var>NETCDF_PATH</var>/lib -lnetcdf -lcurl </append>
  </SLIBS>

  <CONFIG_ARGS>
    <append> --host=Linux </append>
  </CONFIG_ARGS>
  <NETCDF_PATH><env>NETCDFLIB</env>/..</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
</compiler>

<compiler COMPILER="pgi" MACH="hera">
  <CFLAGS>
    <append DEBUG="false"> -O2 </append>
  </CFLAGS>

  <FFLAGS>
    <append DEBUG="false"> -O2 </append>
  </FFLAGS>

  <LDFLAGS>
    <append> -Wl,-rpath /usr/local/tools/netcdf-pgi-4.1.3/lib </append>
  </LDFLAGS>
  <SLIBS>
    <append><shell>/usr/local/tools/netcdf-pgi-4.1.3/bin/nc-config --flibs</shell></append>
  </SLIBS>

  <NETCDF_PATH>/usr/local/tools/netcdf-pgi-4.1.3</NETCDF_PATH>
  <MPI_PATH>/usr/local/tools/mvapich2-pgi-1.7/</MPI_PATH>
  <MPI_LIB_NAME>mpich</MPI_LIB_NAME>
</compiler>

<compiler COMPILER="pgi" MACH="hopper">
  <CFLAGS>
    <append DEBUG="false"> -O2 </append>
  </CFLAGS>

  <FFLAGS>
    <append DEBUG="false"> -O2 </append>
  </FFLAGS>

  <CXX_LIBS>
    <base> -lmpichf90_pgi <env>PGI_PATH</env>/linux86-64/<env>PGI_VERSION</env>/lib/f90main.o </base>
  </CXX_LIBS>

  <TRILINOS_PATH>/project/projectdirs/ccsm1/Trilinos/trilinos-10.12.2/hopper-pgi/install</TRILINOS_PATH>
  <SUPPORTS_CXX>true</SUPPORTS_CXX>
</compiler>

<compiler COMPILER="intel" MACH="hopper">
  <SLIBS>
    <append><shell><var>NETCDF_PATH</var>/bin/nf-config --flibs</shell></append>
  </SLIBS>
  <ESMF_LIBDIR DEBUG="false">/project/projectdirs/ccsm1/esmf/ESMF_5_3_0_intel12.1.5/lib/libO/Unicos.intel.64.mpi.default/</ESMF_LIBDIR>
  <ESMF_LIBDIR DEBUG="true">/project/projectdirs/ccsm1/esmf/ESMF_5_3_0_intel12.1.5/lib/libg/Unicos.intel.64.mpi.default/</ESMF_LIBDIR>
</compiler>

<compiler COMPILER="gnu" MACH="hopper">
  <TRILINOS_PATH>/project/projectdirs/ccsm1/Trilinos/trilinos-10.12.2/hopper-gnu/install</TRILINOS_PATH>
</compiler>

<compiler MACH="pleiades-wes">
  <FFLAGS>
    <append DEBUG="false"> -O2 -xSSE4.2 </append>
  </FFLAGS>

  <SLIBS>
    <append>-L<env>NETCDF_DIR</env>/lib -lnetcdff -lnetcdf</append>
  </SLIBS>

  <NETCDF_PATH>/nasa/netcdf/4.1.3/intel/mpt</NETCDF_PATH>
  <MPI_PATH>/nasa/sgi/mpt/2.11r13</MPI_PATH>
  <MPI_LIB_NAME>mpi</MPI_LIB_NAME>
  <MPICC>icc</MPICC>
</compiler>

<compiler MACH="pleiades-san">
  <FFLAGS>
    <append DEBUG="false"> -O2 -xAVX </append>
  </FFLAGS>

  <SLIBS>
    <append>-L<env>NETCDF_DIR</env>/lib -lnetcdff -lnetcdf</append>
  </SLIBS>

  <NETCDF_PATH>/nasa/netcdf/4.1.3/intel/mpt</NETCDF_PATH>
  <MPI_PATH>/nasa/sgi/mpt/2.11r13</MPI_PATH>
  <MPI_LIB_NAME>mpi</MPI_LIB_NAME>
  <MPICC>icc</MPICC>
</compiler>

<compiler MACH="pleiades-ivy">
  <FFLAGS>
    <append DEBUG="false"> -O2 -xAVX </append>
  </FFLAGS>

  <SLIBS>
    <append>-L<env>NETCDF_DIR</env>/lib -lnetcdff -lnetcdf</append>
  </SLIBS>

  <NETCDF_PATH>/nasa/netcdf/4.1.3/intel/mpt</NETCDF_PATH>
  <MPI_PATH>/nasa/sgi/mpt/2.11r13</MPI_PATH>
  <MPI_LIB_NAME>mpi</MPI_LIB_NAME>
  <MPICC>icc</MPICC>
</compiler>

<compiler MACH="pleiades-has">
  <FFLAGS>
    <append DEBUG="false"> -O2 -aCORE-AVX2 -align array32byte </append>
  </FFLAGS>

  <SLIBS>
    <append>-L<env>NETCDF_DIR</env>/lib -lnetcdff -lnetcdf</append>
  </SLIBS>

  <NETCDF_PATH>/nasa/netcdf/4.1.3/intel/mpt</NETCDF_PATH>
  <MPI_PATH>/nasa/sgi/mpt/2.11r13</MPI_PATH>
  <MPI_LIB_NAME>mpi</MPI_LIB_NAME>
  <MPICC>icc</MPICC>
</compiler>

<compiler MACH="sierra">
  <LDFLAGS>
    <append> -Wl,-rpath /usr/local/tools/netcdf-pgi-4.1.3/lib </append>
  </LDFLAGS>
  <SLIBS>
    <append><shell>/usr/local/tools/netcdf-pgi-4.1.3/bin/nc-config --flibs</shell></append>
  </SLIBS>

  <NETCDF_PATH>/usr/local/tools/netcdf-pgi-4.1.3</NETCDF_PATH>
  <MPI_PATH>/usr/local/tools/mvapich2-pgi-1.7/</MPI_PATH>
  <MPI_LIB_NAME>mpich</MPI_LIB_NAME>
</compiler>


<compiler MACH="goldbach">
  <CPPDEFS>
    <append MODEL="gptl"> -DHAVE_NANOTIME -DBIT64 -DHAVE_VPRINTF -DHAVE_BACKTRACE -DHAVE_SLASHPROC -DHAVE_COMM_F2C -DHAVE_TIMES -DHAVE_GETTIMEOFDAY </append>
  </CPPDEFS>

  <SLIBS>
    <append><shell><env>NETCDF_PATH</env>/bin/nf-config --flibs</shell></append>
  </SLIBS>

  <MPI_LIB_NAME MPILIB="openmpi">mpi</MPI_LIB_NAME>
  <LAPACK_LIBDIR>/usr/lib64</LAPACK_LIBDIR>
</compiler>

<compiler COMPILER="intel" MACH="goldbach">
  <LDFLAGS>
    <append> -Wl,-rpath,<env>NETCDF_PATH</env>/lib </append>
    <append> -Wl,-rpath,<env>COMPILER_PATH</env>/lib/intel64 </append>
    <append> -Wl,-rpath,<env>COMPILER_PATH</env>/mkl/lib/intel64 </append>
  </LDFLAGS>

  <PFUNIT_PATH>/home/santos/pFUnit/pFUnit_Intel_3_0</PFUNIT_PATH>
</compiler>

<compiler COMPILER="pgi" MACH="goldbach">
  <CFLAGS>
    <append DEBUG="false"> -O0 </append>
  </CFLAGS>

  <FFLAGS>
    <append DEBUG="false"> -O0 </append>
  </FFLAGS>

  <LDFLAGS>
    <append> -lgomp </append>
    <append> -Wl,-R<env>NETCDF_PATH</env>/lib </append>
    <append> -Wl,-R<env>COMPILER_PATH</env>/lib </append>
    <append> -Wl,-R<env>COMPILER_PATH</env>/libso </append>
  </LDFLAGS>
</compiler>

<compiler COMPILER="nag" MACH="goldbach">
  <LDFLAGS>
    <!-- Experimental wrapper for OpenMP. -->
    <!-- <append compile_threaded="true"> -L/home/santos/lib/fake_omp -lfake_omp -Wl,-Wl,,rpath=/home/santos/lib/fake_omp </append> -->
  </LDFLAGS>

  <NETCDF_PATH>/usr/local/netcdf-gcc-nag</NETCDF_PATH>
  <MPI_PATH MPILIB="openmpi">/usr/local/openmpi-gcc-nag</MPI_PATH>
  <PFUNIT_PATH>/home/santos/pFUnit/pFUnit_NAG_3_0</PFUNIT_PATH>
</compiler>

<compiler MACH="hobart">
  <CPPDEFS>
    <append MODEL="gptl"> -DHAVE_NANOTIME -DBIT64 -DHAVE_VPRINTF -DHAVE_BACKTRACE -DHAVE_SLASHPROC -DHAVE_COMM_F2C -DHAVE_TIMES -DHAVE_GETTIMEOFDAY </append>
  </CPPDEFS>

  <SLIBS>
    <append><shell><env>NETCDF_PATH</env>/bin/nf-config --flibs</shell></append>
  </SLIBS>

  <MPI_LIB_NAME MPILIB="openmpi">mpi</MPI_LIB_NAME>
  <MPI_LIB_NAME MPILIB="mvapich2">mpich</MPI_LIB_NAME>
  <LAPACK_LIBDIR> /usr/lib64 </LAPACK_LIBDIR>
</compiler>

<compiler COMPILER="intel" MACH="hobart">
  <LDFLAGS>
    <append> -lquadmath </append>
    <append> -Wl,-rpath,<env>NETCDF_PATH</env>/lib </append>
    <append> -Wl,-rpath,<env>COMPILER_PATH</env>/lib/intel64 </append>
    <append> -Wl,-rpath,<env>COMPILER_PATH</env>/mkl/lib/intel64 </append>
    <append> -Wl,-rpath,<env>MPI_PATH</env>/lib </append>
  </LDFLAGS>
  <SLIBS>
    <append MPILIB="mvapich2"> -mkl=cluster </append>
  </SLIBS>

  <PFUNIT_PATH>/home/santos/pFUnit/pFUnit_Intel_3_0</PFUNIT_PATH>
</compiler>

<compiler COMPILER="pgi" MACH="hobart">
  <CFLAGS>
    <append DEBUG="false"> -O0 </append>
  </CFLAGS>

  <FFLAGS>
    <append DEBUG="false"> -O0 </append>
  </FFLAGS>

  <LDFLAGS>
    <append> -lgomp </append>
    <append> -Wl,-R<env>NETCDF_PATH</env>/lib </append>
    <append> -Wl,-R<env>COMPILER_PATH</env>/lib </append>
    <append> -Wl,-R<env>COMPILER_PATH</env>/libso </append>
  </LDFLAGS>
</compiler>

<compiler COMPILER="nag" MACH="hobart">
  <LDFLAGS>
    <append> -lpthread </append>
    <!-- Experimental wrapper for OpenMP. -->
    <!-- <append compile_threaded="true"> -L/home/santos/lib/fake_omp -lfake_omp -Wl,-Wl,,rpath=/home/santos/lib/fake_omp </append> -->
  </LDFLAGS>

  <PFUNIT_PATH>/home/santos/pFUnit/pFUnit_NAG_3_0</PFUNIT_PATH>
</compiler>

<compiler MACH="logan">
  <SLIBS>
    <append><shell><env>NETCDF_PATH</env>/bin/nf-config --flibs</shell></append>
  </SLIBS>

  <MPI_LIB_NAME MPILIB="openmpi">mpi</MPI_LIB_NAME>
  <LAPACK_LIBDIR> /usr/lib64 </LAPACK_LIBDIR>
</compiler>

<compiler COMPILER="intel" MACH="logan">
  <LDFLAGS>
    <append> -Wl,-rpath,<env>NETCDF_PATH</env>/lib </append>
    <append> -Wl,-rpath,<env>COMPILER_PATH</env>/lib/intel64 </append>
  </LDFLAGS>
</compiler>

<compiler COMPILER="pgi" MACH="logan">
  <CFLAGS>
    <append DEBUG="false"> -O2 </append>
  </CFLAGS>

  <FFLAGS>
    <append DEBUG="false"> -O2 </append>
  </FFLAGS>

  <LDFLAGS>
    <append> -lgomp </append>
    <append> -Wl,-R<env>NETCDF_PATH</env>/lib </append>
    <append> -Wl,-R<env>COMPILER_PATH</env>/lib </append>
    <append> -Wl,-R<env>COMPILER_PATH</env>/libso </append>
  </LDFLAGS>
</compiler>

<compiler MACH="stampede">
  <CPPDEFS>
    <append> -DHAVE_NANOTIME </append>
  </CPPDEFS>

  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <NETCDF_PATH><env>TACC_NETCDF_DIR</env></NETCDF_PATH>
</compiler>

<compiler MACH="stampede" COMPILER="intel">
  <CFLAGS>
    <append> -xHost </append>
  </CFLAGS>

  <FFLAGS>
    <append> -xHost </append>
  </FFLAGS>

  <LDFLAGS>
    <append> -L<env>TACC_HDF5_LIB</env> -lhdf5 </append>
  </LDFLAGS>
  <SLIBS>
    <append> <shell><var>NETCDF_PATH</var>/bin/nf-config --flibs</shell> -L<env>TACC_HDF5_LIB</env> -lhdf5 </append>
  </SLIBS>

  <MPICC>mpicc</MPICC>
  <MPIFC>mpif90</MPIFC>
  <MPICXX>mpicxx</MPICXX>
  <SFC>ifort</SFC>
  <SCC>icc</SCC>
  <SCXX>icpc</SCXX>
  <TRILINOS_PATH><env>TRILINOS_PATH</env></TRILINOS_PATH>
</compiler>

<compiler MACH="babbage">
  <CPPDEFS>
    <append> -DHAVE_NANOTIME </append>
  </CPPDEFS>

  <CFLAGS>
    <append> -xHost -no-save-temps </append>
  </CFLAGS>

  <FFLAGS>
    <append> -xHost -no-save-temps </append>
  </FFLAGS>

  <LDFLAGS>
    <append> <env>NETCDF</env> </append>
  </LDFLAGS>
  <SLIBS>
    <append> <env>NETCDF</env> <env>MKL</env> </append>
  </SLIBS>

  <CONFIG_ARGS>
    <append> --host=Linux </append>
  </CONFIG_ARGS>
  <MPIFC> mpiifort </MPIFC>
  <MPICC> mpiicc  </MPICC>
  <MPICXX> mpiicpc </MPICXX>
  <SFC> ifort </SFC>
  <SCC> icc </SCC>
  <!-- PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS -->
  <NETCDF_PATH><env>NETCDF_DIR</env></NETCDF_PATH>
  <PNETCDF_PATH><env>PNETCDF_DIR</env></PNETCDF_PATH>
</compiler>

<compiler MACH="pronghorn" COMPILER="intel">
  <CFLAGS>
    <append> -xHost </append>
  </CFLAGS>

  <FFLAGS>
    <append> -xHost </append>
  </FFLAGS>

  <LDFLAGS>
    <append> -L<env>TACC_HDF5_LIB</env> -lhdf5 </append>
  </LDFLAGS>
  <SLIBS>
    <append> <shell><env>NETCDF_PATH</env>/bin/nf-config --flibs</shell> -L<env>TACC_HDF5_LIB</env> -lhdf5 </append>
  </SLIBS>

  <MPICC>mpiicc</MPICC>
  <MPIFC>mpiifort</MPIFC>
  <MPICXX>mpicpc</MPICXX>
  <SFC>ifort</SFC>
  <SCC>icc</SCC>
  <SCXX>icpc</SCXX>
  <TRILINOS_PATH><env>TRILINOS_PATH</env></TRILINOS_PATH>
</compiler>

</config_compilers>
